[
    {kernel, [
        {logger_level, info},
        {logger, [
            {handler, default, logger_std_h, #{
                level => debug,
                config => #{
                    type => {file, "/var/log/wapi-pcidss/console.json"},
                    sync_mode_qlen => 20,
                    burst_limit_enable => true,
                    burst_limit_max_count => 600,
                    burst_limit_window_time => 1000
                },
                filters => [{access_log, {fun logger_filters:domain/2, {stop, equal, [cowboy_access_log]}}}],
                formatter => {logger_logstash_formatter, #{}}
            }},
            {handler, access_logger, logger_std_h, #{
                level => info,
                config => #{
                    type => {file, "/var/log/wapi-pcidss/access_log.json"},
                    sync_mode_qlen => 20,
                    burst_limit_enable => true,
                    burst_limit_max_count => 600,
                    burst_limit_window_time => 1000
                },
                filters => [{access_log, {fun logger_filters:domain/2, {stop, not_equal, [cowboy_access_log]}}}],
                formatter => {logger_logstash_formatter, #{}}
            }}
        ]}
    ]},

    {scoper, [
        {storage, scoper_storage_logger}
    ]},

    {os_mon, [
        {disksup_posix_only, true}
    ]},

    {wapi, [
        {ip, "::"},
        {port, 8080},
        %% To send ASCII text in 5xx replies
        %% {oops_bodies, #{
        %%     500 => "oops_bodies/500_body"
        %% }},
        {scoper_event_handler_options, #{
            event_handler_opts => #{
                formatter_opts => #{
                    max_length => 1000,
                    max_printable_string_length => 80
                }
            }
        }},
        {bouncer_ruleset_id, <<"service/authz/api">>},
        {public_endpoint, <<"http://wapi">>},
        {service_urls, #{
            cds_storage => "http://cds:8022/v2/storage",
            binbase => "http://binbase:8022/v1/binbase",
            identdoc_storage => "http://cds:8022/v1/identity_document_storage"
        }},
        {service_deadlines, #{
            cds_storage => 30000
        }},
        {health_check, #{
            disk => {erl_health, disk, ["/", 99]},
            memory => {erl_health, cg_memory, [99]},
            service => {erl_health, service, [<<"wapi">>]}
        }},
        {lechiffre_opts, #{
            encryption_source => {json, {file, <<"path/to/pub.secret">>}},
            decryption_sources => [{json, {file, <<"path/to/priv.secret">>}}]
        }},
        {validation, #{
            env => #{now => {{2020, 03, 01}, {0, 0, 0}}}
        }},
        {resource_token_lifetime, <<"64m">>},
        {max_request_deadline, 60000},
        {auth_config, #{
            metadata_mappings => #{
                party_id => <<"dev.vality.party.id">>,
                user_id => <<"dev.vality.user.id">>,
                user_email => <<"dev.vality.user.email">>
            }
        }}
    ]},

    {token_keeper_client, [
        {service_clients, #{
            authenticator => #{
                url => <<"http://token-keeper-v2:8022/v2/authenticator">>
            },
            authorities => #{
                ephemeral => #{},
                offline => #{}
            }
        }}
    ]},

    {dmt_client, [
        % milliseconds
        {cache_update_interval, 5000},
        {max_cache_size, #{
            elements => 20,
            % 50Mb
            memory => 52428800
        }},
        {woody_event_handlers, [
            {scoper_woody_event_handler, #{
                event_handler_opts => #{
                    formatter_opts => #{
                        max_length => 1000
                    }
                }
            }}
        ]},
        {service_urls, #{
            'Repository' => <<"http://dominant:8022/v1/domain/repository">>,
            'RepositoryClient' => <<"http://dominant:8022/v1/domain/repository_client">>
        }}
    ]},

    {snowflake, [
        % 1 second
        {max_backward_clock_moving, 1000},
        {machine_id, hostname_hash}
    ]},

    {prometheus, [
        {collectors, [default]}
    ]}
].
